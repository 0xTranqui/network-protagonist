# ================================
# ====== DELEGATE REGISTRY =======
# ================================

# Uncomment and use if needed in the future
# type DelegateRegistry @entity {
#   id: String!
#   status: Boolean!
#   target: String!
#   transferNonce: BigInt!
#   userId: BigInt
#   user: User! @derivedFrom(field: "DelegateRegistry")
# }

# ================================
# ======== ID REGISTRY ===========
# ================================

type IdRegistry @entity {
  id: String!
  to: String
  from: String
  backup: Bytes
  data: String
  userId: BigInt
  # user: User!
}

# ================================
# ======== NODE REGISTRY =========
# ================================

type Node @entity {
  id: String!
  sender: String!
  userId: BigInt!
  nodeId: BigInt!
  schema: String!
  messages: [Message!]! @derivedFrom(field: "node")
  # accessControl: AccessControl
  nodeAdmin: [BigInt!]!
  nodeMembers: [BigInt!]!
  # channel: Channel
  # publication: Publication
}

type Message @entity {
  id: String!
  nodeId: BigInt
  node: Node 
  sender: String
  msgType: BigInt
  msgBody: Bytes
  userId: BigInt
  # user: User! 
}


# type AccessControl @entity {
#   id: String!
#   nodeAdmin: [BigInt!]!
#   nodeMembers: [BigInt!]!
#   node: Node!
#   }

type Publication @entity {
  id: String!
  uri: String!
  name: String
  creator: String
  description: String
  thumbnail: String
  fullRes: String
  animationUrl: String
  createdDate: String
  contentType: String
  createdBy: String

  # nodeId: BigInt
  # node: Node! 
}


type Channel @entity {
  id: String!
  hashId: String!
  uri: String
  items: [Item!]! @derivedFrom(field: "channel")
  name: String,
  description: String,
  coverImageUri: String
  createdAt: BigInt
  createdBy: String
  # metadata: Metadata FUTURE
  # nodeId: BigInt
  # node: Node!
}


# type Metadata @entity {
#   id: String # this would be based off the ipfs cid, so updating the metadata for something requires updating the cid
#   uri: String, 
#   name: String,
#   desecription: String,
#   imageUri: String,
#   animtationUri: String,
#   thumbnailUri: String
#   ###
#   ###
#   ###
#   ###
#   ###
# }

# type ChannelMetadata @entity {
#   name
#   description 
#   uri 
#   type 
# }

type Item @entity {
  id: String!
  userId: BigInt
  chainId: BigInt!
  targetId: BigInt!
  target: String!
  hasId: Boolean!
  channel: Channel!
}


# type Register @entity {
#   id: String!
#   sender: String
#   nodeId: BigInt
#   node: Node! @derivedFrom(field: "nodeId")
#   schema: Bytes
#   messages: [Bytes]
#   userId: BigInt
#   user: User! 
# }

# ================================
# ====== RIVER VALIDATOR V1 ======
# ================================

# type RiverValidatorV1 @entity {
#   id: String!
#   status: Boolean
#   operator: String
#   user: User! @derivedFrom(field: "RiverValidatorV1")
# }

# ================================
# ============ USER ==============
# ================================


# type User @entity {
#   id: String!
#   userId: BigInt!
#   IdRegistry: [IdRegistry!]! @derivedFrom(field: "userId")
#   # DelegateRegistry: [DelegateRegistry!]!
#   # nodeId: BigInt
#   # node: [Node] @deriveFrom(field: "nodeId")
#   accessControl: [AccessControl] @derivedFrom(field: "nodeAdmin")
#   messages: [Message] @derivedFrom(field: "userId")
#   # riverValidatorV1: [RiverValidatorV1!]!
# }