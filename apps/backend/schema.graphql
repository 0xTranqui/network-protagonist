type PieceMetadata @entity {
id: String!
pieceName: String
pieceCreator: String
pieceDescription: String
pieceImageURL: String 
pieceAnimationURL: String
pieceCreatedDate: String
pieceContentType: String 
}

type Listing @entity {
  id: String!
  ## sender
  ## blockNumber
  chainId: String!
  tokenId: String!
  listingAddress: String!
  hasTokenId: Boolean!
  channel: Channel!
  listingTargetMetadata: PieceMetadata! 

  ## target metadata json -- the query to initially fetch and/or refresh
  ## metadata should just return a processed json here
}

type Channel @entity {
  id: String!
  contractUri: String
  listings: [Listing!]! @derivedFrom(field: "channel")
}


type Router @entity {
  id: String!
  press: String
  sender: String
  factory: String
  pointer: String
  newPress: String
  newPressData: String
  createdAt: BigInt
  transactionHash: String
  # RawTransaction: RawTransaction
}


type LogicTransmitterMerkleAdmin @entity{
  id: String! 
  press: String
  merkleRoot: String
  accounts: [String]
  roles: [Boolean]
}

# type RawTransaction @entity {
#   id: String!
#   transactionHash: String
#   eventType: String
#   createdAt: BigInt
#   Press: [Router] @derivedFrom(field: "RawTransaction")
#   tokenStorage: [TokenStorage] @derivedFrom(field: "RawTransaction")
# }

# type Arweave @entity {
#   id: String!
#   link: String
#   tableName: String
# }
